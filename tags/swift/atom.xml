<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - swift</title>
    <link rel="self" type="application/atom+xml" href="https://wonkwh.github.io/tags/swift/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://wonkwh.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-02-22T00:00:00+00:00</updated>
    <id>https://wonkwh.github.io/tags/swift/atom.xml</id>
    <entry xml:lang="en">
        <title>Swinject Tutorial for iOS</title>
        <published>2024-02-22T00:00:00+00:00</published>
        <updated>2024-02-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/swininjecttutorial/"/>
        <id>https://wonkwh.github.io/swininjecttutorial/</id>
        
        <summary type="html">&lt;ul&gt;
&lt;li&gt;원문: https:&#x2F;&#x2F;www.kodeco.com&#x2F;17-swinject-tutorial-for-ios-getting-started&lt;&#x2F;li&gt;
&lt;li&gt;이 튜토리얼에서는 Swift로 작성된 의존성 주입 프레임워크인 Swinject를 통해 의존성 주입(DI)의 개념에 대해 알아본다&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Refactoring Massive App Delegate</title>
        <published>2021-02-01T00:00:00+00:00</published>
        <updated>2021-02-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/refactoringappdelegate/"/>
        <id>https://wonkwh.github.io/refactoringappdelegate/</id>
        
        <summary type="html">&lt;h2 id=&quot;refactoring-massive-app-delegate&quot;&gt;Refactoring Massive App Delegate&lt;&#x2F;h2&gt;
&lt;p&gt;실제 production app 을 개발하다 보면 &lt;code&gt;AppDelegate&lt;&#x2F;code&gt; 클래스가 쉽게 비대해지고 파일수가 어마어마하게 늘어나는 경우가 비일비재하다. 이를 refactoring 하는 방법&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Sign in with Apple</title>
        <published>2020-12-05T00:00:00+00:00</published>
        <updated>2020-12-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/signinwithapple/"/>
        <id>https://wonkwh.github.io/signinwithapple/</id>
        
        <summary type="html">&lt;p&gt;Apple SignIn feature를 &lt;code&gt;DelegateProxy&lt;&#x2F;code&gt; 를 이용하여 Rx Extension 구현&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>SwiftUI Custom View Modifiers</title>
        <published>2020-11-27T00:00:00+00:00</published>
        <updated>2020-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/swiftuicustomviewmodifiers/"/>
        <id>https://wonkwh.github.io/swiftuicustomviewmodifiers/</id>
        
        <summary type="html">&lt;p&gt;SwiftUI에서 ViewModifier 를 이용하여 Custom View를 만드는 방법&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Enum-Driven TableView Development</title>
        <published>2020-11-09T00:00:00+00:00</published>
        <updated>2020-11-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/enumdriventableviewdevelopment/"/>
        <id>https://wonkwh.github.io/enumdriventableviewdevelopment/</id>
        
        <summary type="html">&lt;p&gt;Swift State Enum 을 이용하여 tableview의 empty, pagination, error view를 처리하는 방법&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>integrating swiftui with uikit</title>
        <published>2020-09-14T00:00:00+00:00</published>
        <updated>2020-09-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/integratingswiftuiwithuikit/"/>
        <id>https://wonkwh.github.io/integratingswiftuiwithuikit/</id>
        
        <summary type="html">&lt;p&gt;UIKit 에서 SwiftUI View 를 호출하는 방법&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>swift composable architecture part_1</title>
        <published>2020-04-14T00:00:00+00:00</published>
        <updated>2020-04-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/swift-composable-architecture-part1/"/>
        <id>https://wonkwh.github.io/swift-composable-architecture-part1/</id>
        
        <content type="html" xml:base="https://wonkwh.github.io/swift-composable-architecture-part1/">&lt;h1 id=&quot;swift-composable-archtecture-part1&quot;&gt;swift-composable-archtecture-part1&lt;&#x2F;h1&gt;
&lt;p&gt;–	https:&#x2F;&#x2F;github.com&#x2F;pointfreeco&#x2F;swift-composable-architecture#installation
–	https:&#x2F;&#x2F;www.pointfree.co&#x2F;collections&#x2F;composable-architecture&#x2F;a-tour-of-the-composable-architecture&#x2F;ep100-a-tour-of-the-composable-architecture-part-1&lt;&#x2F;p&gt;
&lt;h2 id=&quot;todo-example&quot;&gt;todo example&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;junbi-jageob&quot;&gt;준비 작업&lt;&#x2F;h3&gt;
&lt;p&gt;–	swift pacakage로 install
–	&lt;code&gt;http:&#x2F;&#x2F;github.com&#x2F;pointfreeco&#x2F;swift-composable-architecture&lt;&#x2F;code&gt; 추가 
–	state, action, environment 추가 후 Reducer 추가&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ComposableArchitecture
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; AppState {
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; AppAction {
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; AppEnvironment {
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; appReducer = Reducer&amp;lt;AppState, AppAction, AppEnvironment&amp;gt; { state, action, _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; action {
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;–	ContentView에 Store instance 추가 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ContentView: View {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; store: Store&amp;lt;AppState, AppAction&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; body: some View {
&lt;&#x2F;span&gt;&lt;span&gt;        NavigationView {
&lt;&#x2F;span&gt;&lt;span&gt;            List {
&lt;&#x2F;span&gt;&lt;span&gt;                Text(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            }.navigationBarTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Todos&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;–	ContentView_preview 와 sceneDelegate ContentView Constructor 변경&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ContentView_Previews: PreviewProvider {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; previews: some View {
&lt;&#x2F;span&gt;&lt;span&gt;        ContentView(store: Store(
&lt;&#x2F;span&gt;&lt;span&gt;                initialState: AppState(),
&lt;&#x2F;span&gt;&lt;span&gt;                reducer: appReducer,
&lt;&#x2F;span&gt;&lt;span&gt;                environment: AppEnvironment()
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;viewstore-cuga&quot;&gt;ViewStore 추가&lt;&#x2F;h3&gt;
&lt;p&gt;–	state에 domain data model을 추가 &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ToDo: Equatable, Identifiable {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; description = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; id: UUID
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; isComplete = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; AppState: Equatable {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; todos: [ToDo]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;–	view 에 WithViewStore 을 추가 &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;    NavigationView {
&lt;&#x2F;span&gt;&lt;span&gt;        WithViewStore(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.store) { viewStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            List {
&lt;&#x2F;span&gt;&lt;span&gt;                ForEach(viewStore.todos) { todo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;                    Text(todo.description)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }.navigationBarTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Todos&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;–	preview 에 dommy data를 AppState에  추가 &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; ContentView_Previews: PreviewProvider {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static var&lt;&#x2F;span&gt;&lt;span&gt; previews: some View {
&lt;&#x2F;span&gt;&lt;span&gt;        ContentView(
&lt;&#x2F;span&gt;&lt;span&gt;            store: Store(
&lt;&#x2F;span&gt;&lt;span&gt;                initialState: AppState(todos: [
&lt;&#x2F;span&gt;&lt;span&gt;                    ToDo(description: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;PointFree&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, id: UUID(), isComplete: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    ToDo(description: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Udemy&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, id: UUID(), isComplete: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    ToDo(description: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;MoimApp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, id: UUID(), isComplete: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                ]),
&lt;&#x2F;span&gt;&lt;span&gt;                reducer: appReducer,
&lt;&#x2F;span&gt;&lt;span&gt;                environment: AppEnvironment()
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;view-ui-byeongyeong&quot;&gt;View UI 변경&lt;&#x2F;h3&gt;
&lt;p&gt;–	ListView에 체크마크 버튼을 추가하고 isComplete 속성에 따라 foregroundColor를 추가 
–	preview의 속성을 변경하면서 제대로 되는지 확인 할수 있다. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;    List {
&lt;&#x2F;span&gt;&lt;span&gt;        ForEach(viewStore.todos) { todo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            HStack {
&lt;&#x2F;span&gt;&lt;span&gt;                Button(action: {}) {
&lt;&#x2F;span&gt;&lt;span&gt;                    Image(systemName: todo.isComplete ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;checkmark.square&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;square&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                TextField(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Untitled todo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, text: .constant(todo.description))
&lt;&#x2F;span&gt;&lt;span&gt;            }.foregroundColor(todo.isComplete ? .gray : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }.navigationBarTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Todos&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;action-cuga&quot;&gt;Action 추가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;UI action을 &lt;code&gt;AppAction&lt;&#x2F;code&gt; enum 에 추가한다. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;span&gt; AppAction {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; todoCheckboxTapped(index: Int)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; todoTextFieldChanged(index: Int, text: String)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Reducer&lt;&#x2F;code&gt; 에 해당 Action 구현&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; appReducer = Reducer&amp;lt;AppState, AppAction, AppEnvironment&amp;gt; { state, action, _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; action {
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;.todoCheckboxTapped(index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; index):
&lt;&#x2F;span&gt;&lt;span&gt;        state.todos[index].isComplete.toggle()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;.todoTextFieldChanged(index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; index, text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; text):
&lt;&#x2F;span&gt;&lt;span&gt;        state.todos[index].description = text
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentView&lt;&#x2F;code&gt;에 해당 Control Event에 Action send
&lt;ul&gt;
&lt;li&gt;Index를 Foreach에 추가하려면 다음과 같이 추가 &lt;&#x2F;li&gt;
&lt;li&gt;`ForEach(Array(viewStore.todos.enumerated()), id: .element.id)&lt;&#x2F;li&gt;
&lt;li&gt;추후 &lt;code&gt;ForEachStore&lt;&#x2F;code&gt; 로 변경&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;        ForEach(Array(viewStore.todos.enumerated()), id: \.element.id) { index, todo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;            HStack {
&lt;&#x2F;span&gt;&lt;span&gt;                Button(action: {
&lt;&#x2F;span&gt;&lt;span&gt;                    viewStore.send(.todoCheckboxTapped(index: index))
&lt;&#x2F;span&gt;&lt;span&gt;                }) {
&lt;&#x2F;span&gt;&lt;span&gt;                    Image(systemName: todo.isComplete ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;checkmark.square&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;square&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                }.buttonStyle(PlainButtonStyle())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                TextField(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Untitled todo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, text: viewStore.binding(
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;: { $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.todos[index].description },
&lt;&#x2F;span&gt;&lt;span&gt;                  send: { .todoTextFieldChanged(index: index, text: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;                ))
&lt;&#x2F;span&gt;&lt;span&gt;            }.foregroundColor(todo.isComplete ? .gray : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Reducer&lt;&#x2F;code&gt; 에 &lt;code&gt;debug()&lt;&#x2F;code&gt; 추가&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; appReducer = Reducer&amp;lt;AppState, AppAction, Void&amp;gt; { state, action, _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;.debug()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;혹은 &lt;code&gt;SceneDelegate&lt;&#x2F;code&gt; , &lt;code&gt;ContentView_Previews&lt;&#x2F;code&gt;에 contentView instance에 reducer에 reducer paramter에 debug()를 추가 &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; contentView = ContentView(store: Store(
&lt;&#x2F;span&gt;&lt;span&gt;                initialState: AppState(todos: [
&lt;&#x2F;span&gt;&lt;span&gt;                    ToDo(description: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;PointFree&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, id: UUID(), isComplete: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    ToDo(description: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Udemy&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, id: UUID(), isComplete: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    ToDo(description: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;MoimApp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, id: UUID(), isComplete: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                ]),
&lt;&#x2F;span&gt;&lt;span&gt;                reducer: appReducer.debug(),
&lt;&#x2F;span&gt;&lt;span&gt;                environment: AppEnvironment()
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;결과는 다음과 같은 로그를 console에 뿌려준다. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;AppAction.todoCheckboxTapped(
&lt;&#x2F;span&gt;&lt;span&gt;    index: 1
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  AppState(
&lt;&#x2F;span&gt;&lt;span&gt;    todos: [
&lt;&#x2F;span&gt;&lt;span&gt;      ToDo(
&lt;&#x2F;span&gt;&lt;span&gt;        description: &amp;quot;PointFree&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        id: 2CA87ACF-3868-4B1F-9D95-D25C03FB6B02,
&lt;&#x2F;span&gt;&lt;span&gt;        isComplete: true
&lt;&#x2F;span&gt;&lt;span&gt;      ),
&lt;&#x2F;span&gt;&lt;span&gt;      ToDo(
&lt;&#x2F;span&gt;&lt;span&gt;        description: &amp;quot;Udemy&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        id: EB6738F4-B644-40B1-9519-8C7050FB55B3,
&lt;&#x2F;span&gt;&lt;span&gt;−       isComplete: false
&lt;&#x2F;span&gt;&lt;span&gt;+       isComplete: true
&lt;&#x2F;span&gt;&lt;span&gt;      ),
&lt;&#x2F;span&gt;&lt;span&gt;      ToDo(
&lt;&#x2F;span&gt;&lt;span&gt;        description: &amp;quot;MoimApp&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        id: 95E6E5BF-6FB1-430E-8444-B1B137369066,
&lt;&#x2F;span&gt;&lt;span&gt;        isComplete: false
&lt;&#x2F;span&gt;&lt;span&gt;      ),
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ListController like SwifUI&#x27;s List</title>
        <published>2020-03-16T00:00:00+00:00</published>
        <updated>2020-03-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/collectionviewlikeswiftui/"/>
        <id>https://wonkwh.github.io/collectionviewlikeswiftui/</id>
        
        <summary type="html">&lt;p&gt;&lt;code&gt;Micro&lt;&#x2F;code&gt; Lib를 이용하여 swiftUI의 &lt;code&gt;List&lt;&#x2F;code&gt;와 유사하게 collectionView를 구성&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;original article 
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;onmyway133.github.io&#x2F;blog&#x2F;How-to-build-SwiftUI-style-UICollectionView-data-source-in-Swift&#x2F;&quot;&gt;How-to-build-SwiftUI-style-UICollectionView-data-source-in-Swift&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Building Better View</title>
        <published>2020-03-15T00:00:00+00:00</published>
        <updated>2020-03-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/buildingbetterviews/"/>
        <id>https://wonkwh.github.io/buildingbetterviews/</id>
        
        <summary type="html">&lt;p&gt;Model, ViewModel 을 view로 보여주어야 할떄 &lt;code&gt;viewData protocol&lt;&#x2F;code&gt; 을 이용하여 일관적으로 view를 configure 하는 방법&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;original article 
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fabisevi.ch&#x2F;2019&#x2F;12&#x2F;26&#x2F;building-better-views-part-i&#x2F;&quot;&gt;Building better view&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>UICollectionView, full width cells, allow autolayout dynamic height</title>
        <published>2020-02-27T00:00:00+00:00</published>
        <updated>2020-02-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/uicollectionview-fullwidthcells-dynamic-height/"/>
        <id>https://wonkwh.github.io/uicollectionview-fullwidthcells-dynamic-height/</id>
        
        <summary type="html">&lt;p&gt;CollectionView 를 이용해 tableview와 유사한 ListView를 사용하면서 tableview의 dynamic height와 같이 autolayout 기반의 dynamic height를 구현하는 코드&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>usage-official-swift-log</title>
        <published>2020-01-06T00:00:00+00:00</published>
        <updated>2020-01-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/apple-log/"/>
        <id>https://wonkwh.github.io/apple-log/</id>
        
        <summary type="html">&lt;p&gt;Apple의 official swift-log package를 이용하여 os unified logging를 사용하는 방법&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>inputAccessoryView SafeLayoutGuide fix</title>
        <published>2019-11-28T00:00:00+00:00</published>
        <updated>2019-11-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/inputaccessaryview-in-safearea-bug/"/>
        <id>https://wonkwh.github.io/inputaccessaryview-in-safearea-bug/</id>
        
        <summary type="html">&lt;p&gt;keyboard 위에 추가 뷰를 만들려면 NotificationHandler로 직접 콘트롤해도 되지만 &lt;code&gt;inputAccessoryView&lt;&#x2F;code&gt; 를 override해서 view를 재정의해주면 간단하다 
하지만 iphone x 이상 safelayout 을 인식하지 못하는 문제가 있다 이를 해결하기 위한 코드&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>fluid interface effect</title>
        <published>2019-11-27T00:00:00+00:00</published>
        <updated>2019-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/fluid-interface/"/>
        <id>https://wonkwh.github.io/fluid-interface/</id>
        
        <summary type="html">&lt;p&gt;wwdc2018 세션중 하나인 &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;videos&#x2F;play&#x2F;wwdc2018&#x2F;803&#x2F;&quot;&gt;Designing Fluid Interfaces&lt;&#x2F;a&gt; 를 직접 구현한 opensource중 button 구현에 대해 정리&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nathangitter&#x2F;fluid-interfaces&quot;&gt;fluid-interfaces&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Reuable Protocol</title>
        <published>2019-11-22T00:00:00+00:00</published>
        <updated>2019-11-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/reuable-protocol/"/>
        <id>https://wonkwh.github.io/reuable-protocol/</id>
        
        <summary type="html">&lt;p&gt;&lt;code&gt;Reusable&lt;&#x2F;code&gt; protocol 을 이용하여 cell register , dequeueReusableCell &lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>StackViewControllable</title>
        <published>2019-11-18T00:00:00+00:00</published>
        <updated>2019-11-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/stackviewcontrollable/"/>
        <id>https://wonkwh.github.io/stackviewcontrollable/</id>
        
        <summary type="html">&lt;p&gt;상속대신 프로토콜을 이용하여 StackViewController 구현방법&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>UIStackViewController</title>
        <published>2019-11-18T00:00:00+00:00</published>
        <updated>2019-11-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wonkwh.github.io/stackviewcontroller/"/>
        <id>https://wonkwh.github.io/stackviewcontroller/</id>
        
        <summary type="html">&lt;p&gt;UITableView, UICollectionView를 쓰지 않고 간단히 UIScrollView에 UIStackView를 addView해서 사용하는 법&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
